# This group member image metadata describes a BASE image (used by images/myutil in its FROM field):
# How we should find a the Dockerfile in a GitHub repo and build it for an OCP release.

# Information about the dist-git repo
distgit:
  namespace: containers   # default is "containers", but can be set to "apbs" for new dist-git repo type
  # Component specifies the Bugzilla components associated with this image. It defaults to
  # the name of the distgit repo.
  ## component: myutil-base

# The image name the Dockerfile builds. In this example, the image would land
# in registry.access.redhat.com/openshift3/my-util-base:vX.Y.Z once shipped.
name: openshift3/my-util-base

# Mark this image for use only as a base image. Base images are not included
# in the release image list.
# Type: boolean
# Required: false
# Default: false
base_only: true

# This section defines how the FROM field in the upstream Dockerfile will be set
# before each build.
from:
  # Use stream to indicate one of the streams defined in streams.yml. Generally, this would be
  # "rhel" for OCP images. It is called a "stream" because this is not a fixed version of rhel,
  # but will change to over time as new versions of RHEL are released or CVEs are fixed.
  stream: rhel

  # Use "member" if another member of the group defines the base image for this Dockerfile.
  ## member: openshift-enterprise   # From a member of the group

  # Use "image" if a literal image and tag should be injected into the FROM field of the Dockerile.
  # This is uncommon.
  ## image: namespace/imagename:tag

# Owners are emailed when the build process notes the upstream Dockerfile has
# changed and needs to be "reconciled" with what is in distgit. Eventually, owners
# may also be notified if their image / RPM is causing the build to fail.
owners:
  - email@redhat.com
  - email2@redhat.com

# Labels that will be set into the Dockerfile. name, version, and release will be set automatically.
# com.redhat.component  will default to the dist-git repo name (openshift-enterprise-node).
labels:
  vendor: Red Hat
  License: GPLv2+
  io.k8s.display-name: "MyUtil Base Image"
  io.k8s.description: "This is an example BASE (i.e. myutil specifies it in FROM) image to be managed by doozer."
  io.openshift.tags: "fake,openshift,doozer"

# This section describes:
# (1) where to find the upstream Dockerfile for this image.
# (2) Fine-grained changes that need to be made to the upstream Dockerfile in order for it to build for OCP.
content:

  # Where to pull the upstream Dockerfile from. Source locations are defined by an "alias" which is a logical
  # name for a git repository. Source aliases must be defined in group.yml or specified on the command line
  # by the build process. In the following example, doozer will use the following file for its upstream source Dockerfile:
  # [cloned ose repo root]/images/node/Dockerfile.rhel7
  source:
    # If the source has an alias defined, an extracted local directory can be specified on the local file system
    # using --source alias path.
    # alias: enterprise-images-upstream-example # DEPRECATED
    git: # source content to use for this rpm
      url: git@github.com:OpenShiftART/image-upstream-example.git
      branch:
        target: release-3.8
        # Fallback branch is used if release-3.8 does not exist yet
        fallback: master
    # Specify the path in the upstream repo to use as build context (default: top of the repo)
    # If a build does not require the entire source tree then use a subdirectory as the container build context.
    path: images/myutil
    # Optionally specify non-default upstream Dockerfile (within and relative to path)
    dockerfile: Dockerfile.rhel7
    ##dockerfile: image/myutil/Dockerfile.rhel7

    # Effectively search and replace operations to perform on the upstream Dockerfile. Fields like FROM
    # and label changes are always overrwritten, but we occassionally need to make fine adjustments to
    # RPM names. For example, the Origin RPM "origin-sdn-ovs" has a different name when packaged for OCP.
    modifications:
      - action: replace
        match: "some-origin-string"
        replacement: "some-atomic-openshift-string"
